// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------
{{- $service := .Data.Service -}}
{{- $className := $service.Name}}
{{$subServices:= .Data.SubServices}}

#include "QingStor.h"
#include "Bucket.h"
#include "QsConfig.h"
#include "service_with_c_style/QingStorCStyle.h"
#include "utils/QsStream.h"
#include "external/plog/Log.h"

using namespace QingStor;

void qs_init_sdk(const char *logfile_path, LogLevel qs_log_level,
                 unsigned int init_and_cleanup_curl)
{
    QingStor::SDKOptions sdkOptions;
    sdkOptions.logLevel = qs_log_level;
    sdkOptions.logPath = logfile_path;
    if(!init_and_cleanup_curl){
        sdkOptions.initAndCleanupCurl = false;
    }
    else{
        sdkOptions.initAndCleanupCurl = true;
    }
    
    QingStor::InitializeSDK(sdkOptions);
}

void qs_shutdown_sdk(unsigned int init_and_cleanup_curl)
{
    QingStor::SDKOptions sdkOptions;
    if(!init_and_cleanup_curl){
        sdkOptions.initAndCleanupCurl = false;
    }
    else{
        sdkOptions.initAndCleanupCurl = true;
    }

    QingStor::ShutdownSDK(sdkOptions);
}

qs_context_handle qs_create_service_with_configfile(const char *qs_configfile,
        const char *qs_bucket_name,
        const char *qs_bucket_zone)
{
    qs_context_handle context_hdl;
    QsConfig qsConfig;
    qsConfig.LoadConfigFile(qs_configfile);
    context_hdl.pQsService = new QingStorService(qsConfig);
    context_hdl.pQsBucket =
        new Bucket(qsConfig, qs_bucket_name, qs_bucket_zone);
    return context_hdl;
}

QS_SDK_API qs_context_handle qs_create_service(qs_config_t
        qs_config,
        const char
        *qs_bucket_name,
        const char *qs_bucket_zone)
{
    qs_context_handle context_hdl;
    QsConfig qsConfig;
    if (qs_config.additional_user_agent)
        qsConfig.additionalUserAgent = qs_config.additional_user_agent;
    if (qs_config.access_key_id)
        qsConfig.accessKeyId = qs_config.access_key_id;
    if (qs_config.secret_access_key)
        qsConfig.secretAccessKey = qs_config.secret_access_key;
    if (qs_config.host)
        qsConfig.host = qs_config.host;
    if (qs_config.protocol)
        qsConfig.protocol = qs_config.protocol;
    if(0 < qs_config.port && 65535 > qs_config.port)
    {
        qsConfig.port = qs_config.port;
    }

    if(0 <= qs_config.conn_retries && 10 > qs_config.conn_retries)
    {
        qsConfig.connectionRetries = qs_config.conn_retries;
    }

    if(0 <= qs_config.timeout_period && 100 > qs_config.timeout_period)
    {
        qsConfig.timeOutPeriod = qs_config.timeout_period;
    }

    context_hdl.pQsService = new QingStorService(qsConfig);
    context_hdl.pQsBucket =
        new Bucket(qsConfig, qs_bucket_name, qs_bucket_zone);
    return context_hdl;
}

void qs_release_service(qs_context_handle context_hdl)
{
    if (context_hdl.pQsService)
    {
        QingStorService * pQsService2Delete = (QingStorService *)context_hdl.pQsService;
        delete pQsService2Delete;
    }
    if (context_hdl.pQsBucket)
    {
        Bucket * pBucket2Delete = (Bucket *)context_hdl.pQsBucket;
        delete pBucket2Delete;
    }
}

void qs_set_error_info(qs_error_info_t * err_info, ResponseErrorInfo & errInfo)
{
    int codeLength = errInfo.code.length();
    if (codeLength > 0)
    {
        err_info->code = (char *) malloc(codeLength + 1);
        memset(err_info->code, 0, codeLength + 1);
        strncpy(err_info->code, errInfo.code.c_str(), codeLength);
    }
    int messageLength = errInfo.message.length();
    if (messageLength > 0)
    {
        err_info->message = (char *) malloc(messageLength + 1);
        memset(err_info->message, 0, messageLength + 1);
        strncpy(err_info->message, errInfo.message.c_str(), messageLength);
    }
    int requestIDLength = errInfo.requestID.length();
    if (requestIDLength > 0)
    {
        err_info->request_id = (char *) malloc(requestIDLength + 1);
        memset(err_info->request_id, 0, requestIDLength + 1);
        strncpy(err_info->request_id, errInfo.requestID.c_str(),
                requestIDLength);
    }
    int urlLength = errInfo.url.length();
    if (urlLength > 0)
    {
        err_info->url = (char *) malloc(urlLength + 1);
        memset(err_info->url, 0, urlLength + 1);
        strncpy(err_info->url, errInfo.url.c_str(), urlLength);
    }
}

void qs_release_error_info(qs_error_info_t * err_info)
{
    if (!err_info)
    {
        return;
    }
    
    if(err_info->code)
    {
        free(err_info->code);
    }

    if(err_info->message)
    {
        free(err_info->message);
    }

    if(err_info->request_id)
    {
        free(err_info->request_id);
    }

    if(err_info->url)
    {
        free(err_info->url);
    }
}

void qs_init_error_info(qs_error_info_t * err_info)
{
    err_info->code = NULL;
    err_info->message = NULL;
    err_info->request_id = NULL;
    err_info->url = NULL;
}

{{range $_, $operation := $service.Operations -}}
{{template "InputCStyleInitFun" passThrough $service $operation}}
{{template "OutputCStyleInitFun" passThrough $service $operation}}
{{template "OutputCStyleReleaseFun" passThrough $service $operation}}
{{template "OperationSourceWithCStyle" passThrough $service $operation}}
{{end}}

{{- range $_, $subService := $subServices}}
{{- range $_, $operation := $subService.Operations}}
    {{template "InputCStyleInitFun" passThrough $subService $operation}}
    {{template "OutputCStyleInitFun" passThrough $subService $operation}}
    {{template "OutputCStyleReleaseFun" passThrough $subService $operation}}
    {{template "OperationSourceWithCStyle" passThrough $subService $operation}}
{{- end -}}
{{- end -}}



// +-------------------------------------------------------------------------
// | Copyright (C) 2017 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------
{{- $service := .Data.Service -}}
{{- $className := $service.Name}}
{{- $customizedTypes := .Data.CustomizedTypes}}


#include "QingStor.h"
#include "Bucket.h"
#include "QsConfig.h"
#include "request/QsRequest.h"
#include "http/HttpResponse.h"
#include "external/plog/Log.h"
#include "external/json/json.h"

using namespace QingStor;

void QingStor::InitializeSDK(const SDKOptions & options)
{
    //Init log systom
    LOG_DEBUG << "Initializing SDK...";
    std::string logName = options.logPath;
    logName += "qingstor_sdk_log.txt";
    plog::init((plog::Severity) options.logLevel, logName.c_str(), 1000000, 5);
    if (options.initAndCleanupCurl)
    {
        //InitHttp
        curl_global_init(CURL_GLOBAL_ALL);
        LOG_DEBUG << "curl_global_init done";
    }

    HttpClient::CreateGlobaleCurlPool();
}

void QingStor::ShutdownSDK(const SDKOptions & options)
{
    LOG_DEBUG << "Shutdowning SDK...";
    if (options.initAndCleanupCurl)
    {
        //InitHttp
        curl_global_cleanup();
        LOG_DEBUG << "curl_global_cleanup done";
    }

    HttpClient::DestroyGlobaleCurlPool();
}

QingStorService::QingStorService(const QsConfig &qsConfig) : m_qsConfig(qsConfig)
{
}

// +--------------------------------------------------------------------
// |           RequestBuilderSource and ResponseUnparkerSource                          
// +-------------------------------------------------------------------- 
{{range $_, $operation := $service.Operations -}}
{{template "RequestBuilderSource" passThrough $service $operation $customizedTypes}}
{{template "ResponseUnparkerSource" passThrough $service $operation $customizedTypes}}
{{end}}

// +--------------------------------------------------------------------
// |           SDK API Operation Source                          
// +-------------------------------------------------------------------- 
{{range $_, $operation := $service.Operations -}}
{{template "OperationSource" passThrough $service $operation}}
{{end}}



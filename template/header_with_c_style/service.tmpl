// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------

{{$service := .Data.Service}}
{{$className := $service.Name}}
{{$subServices:= .Data.SubServices}}
#pragma once

#include  "../QsSdkOption.h"
#include  "Types.h"

#ifdef  __cplusplus  
extern "C" {  
#endif 

typedef struct {
    void * pQsService;
    void * pQsBucket;
} qs_context_handle;

typedef struct
{
    const char * additional_user_agent;
    const char * access_key_id;
    const char * secret_access_key;
    const char * host;
    const char * protocol;
    int port;
    int conn_retries;
    int timeout_period;
} qs_config_t;

// "init_and_cleanup_curl": SDK wide options for curl
// If it is being used then we automatically initialize and clean it up.
// If this is a problem for you, set this to false. 
QS_SDK_API void qs_init_sdk(const char *logfile_path, LogLevel qs_log_level,
                            unsigned int init_and_cleanup_curl);

QS_SDK_API void qs_shutdown_sdk(unsigned int init_and_cleanup_curl);

// Create service and get contex handle which is used with erery SDK API.
QS_SDK_API qs_context_handle qs_create_service(qs_config_t qs_config,
        const char *qs_bucket_name,
        const char *qs_bucket_zone);

// Same to fuction "qs_create_service".Specify the path to config file 
// instead of providing config structure.
QS_SDK_API qs_context_handle qs_create_service_with_configfile(const char
        *qs_config_path,
        const char
        *qs_bucket_name,
        const char
        *qs_bucket_zone);

// Release contex handle created by functuin "qs_create_service".
QS_SDK_API void qs_release_service(qs_context_handle context_hdl);

    {{- range $_, $operation := $service.Operations}}
        {{template "InputCStyleHeader" passThrough $service $operation}}
        {{template "InputCStyleInitDeclaration" passThrough $service $operation}}
    {{- end -}}

    {{- range $_, $subService := $subServices}}
    {{- range $_, $operation := $subService.Operations}}
        {{template "InputCStyleHeader" passThrough $subService $operation}}
        {{template "InputCStyleInitDeclaration" passThrough $subService $operation}}
    {{- end -}}
    {{- end -}}

    {{- range $_, $operation := $service.Operations}}
        {{template "OutputCStyleHeader" passThrough $service $operation}}
        {{template "OutputCStyleReleaseDeclaration" passThrough $service $operation}}    
    {{- end -}}

    {{- range $_, $subService := $subServices}}
    {{- range $_, $operation := $subService.Operations}}
        {{template "OutputCStyleHeader" passThrough $subService $operation}}
        {{template "OutputCStyleReleaseDeclaration" passThrough $subService $operation}}   
    {{- end -}}
    {{- end -}}  


    {{range $_, $operation := $service.Operations -}}
    {{template "OperationDeclaration" passThrough $service $operation}}
    {{end}}  

    {{- range $_, $subService := $subServices}}
    {{range $_, $operation := $subService.Operations -}}
    {{template "OperationDeclaration" passThrough $subService $operation}}
    {{end}}
    {{end}}

#ifdef  __cplusplus  
} 
#endif 
